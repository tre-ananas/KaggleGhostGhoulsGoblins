library(vroom)
library(tidyverse)
library(tidymodels)
# Load Data
ggg_train_na <- vroom("trainWithmissingValues.csv")
ggg_train <- vroom("train.csv")
ggg_test <- vroom("test.csv")
str(ggg_train_na)
View(ggg_train_na)
library(DataExplorer)
# EDA
ggg_train_na %>%
inspect_cat()
library(inspectdf)
# EDA
ggg_train_na %>%
inspect_cat()
# EDA for NAs
sum(is.na(ggg_train_na$bone_length))
sum(is.na(ggg_train_na$rotting_flesh))
sum(is.na(ggg_train_na$hair_length))
sum(is.na(ggg_train_na$has_soul))
sum(is.na(ggg_train_na$color))
sum(is.na(ggg_train_na$type))
na_count <-sapply(x, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(ggg_train_na, function(y) sum(length(which(is.na(y)))))
data.frame(na_count)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(ACTION ~ ., data = employee_train) %>%
step_impute_knn(var = hair_length,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = all_predictors(),
neighbors = 5)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(ACTION ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = all_predictors(),
neighbors = 5)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(ACTION ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = all_predictors(),
neighbors = 5)
# Load Libraries
library(vroom)
library(tidyverse)
library(tidymodels)
library(embed)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(ACTION ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = all_predictors(),
neighbors = 5)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(ACTION ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = all_predictors(),
neighbors = 5)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(type ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = all_predictors(),
neighbors = 5)
# Prep, Bake, and View Recipe
imp_prep <- prep(imp_rec)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(type ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = c('bone_length',
'rotting_flesh',
'has_soul',
'color'),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = c('bone_length',
'hair_length',
'has_soul',
'color'),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = c('hair_length',
'rotting_flesh',
'has_soul',
'color'),
neighbors = 5)
# Prep, Bake, and View Recipe
imp_prep <- prep(imp_rec)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(type ~ ., data = ggg_train_na) %>%
step_impute_knn(hair_length,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(rotting_flesh,
impute_with = all_predictors(),
neighbors = 5) %>%
step_impute_knn(bone_length,
impute_with = all_predictors(),
neighbors = 5)
# Prep, Bake, and View Recipe
imp_prep <- prep(imp_rec)
data.frame(na_count)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(ACTION ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = c('has_soul',
'color'),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = c('has_soul',
'color',
'hair_length'),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = c('has_soul',
'color',
'rotting_flesh',
'hair_length'),
neighbors = 5)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(type ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = c('has_soul',
'color'),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = c('has_soul',
'color',
'hair_length'),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = c('has_soul',
'color',
'rotting_flesh',
'hair_length'),
neighbors = 5)
# Prep, Bake, and View Recipe
imp_prep <- prep(imp_rec)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(type ~ ., data = ggg_train_na) %>%
step_impute_knn(var = hair_length,
impute_with = c('has_soul',
'color'),
neighbors = 5) %>%
step_impute_knn(var = rotting_flesh,
impute_with = c('has_soul',
'color'),
neighbors = 5) %>%
step_impute_knn(var = bone_length,
impute_with = c('has_soul',
'color'),
neighbors = 5)
# Prep, Bake, and View Recipe
imp_prep <- prep(imp_rec)
rlang::last_trace()
data.frame(na_count)
hist(ggg_train_na$hair_length)
hist(ggg_train_na$rotting_flesh)
hist(ggg_train_na$bone_length)
# Impute Missing Values
# Create Recipe
imp_rec <- recipe(type ~ ., data = ggg_train_na) %>%
step_impute_mean(hair_length) %>%
step_impute_mean(rotting_flesh) %>%
step_impute_mean(bone_length)
# Prep, Bake, and View Recipe
imp_prep <- prep(imp_rec)
bake(imp_prep, ggg_train_na) %>%
slice(1:10)
baked_train_na <- bake(imp_prep, ggg_train_na)
baked_train_na
# Caluclate RMSE
rmse_vec(baked_train_na[is.na(ggg_train_na)], imputedSet[is.na(ggg_train_na)])
imp_train <- bake(imp_prep, ggg_train_na)
# Caluclate RMSE
rmse_vec(ggg_train[is.na(ggg_train_na)], imp_train[is.na(ggg_train_na)])
table(ggg_train$type)
# Load Libraries
library(vroom)
library(tidyverse)
library(tidymodels)
library(parsnip)
# Load Data
ggg_train <- vroom("train.csv")
ggg_test <- vroom("test.csv")
# Turn "type" into factor
ggg_train$type <- as.factor(ggg_train$type)
# Recipe (leave out 'id')
rf_rec <- recipe(type ~ bone_length + rotting_flesh + hair_length + has_soul + color, data = ggg_train) %>%
step_dummy(color) %>%
step_zv(all_predictors()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
rf_prep <- prep(rf_rec)
bake(rf_prep, ggg_train)
# Create Random Forest model specification
rf_spec <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
# Create classification forest workflow
rf_wf <- workflow() %>%
add_recipe(rf_rec) %>%
add_model(rf_spec)
# Grid of values to tune over
rf_tg <- grid_regular(mtry(range = c(1, 5)),
min_n(),
levels = 5)
# Split data for cross-validation (CV)
rf_folds <- vfold_cv(ggg_train, v = 5, repeats = 1)
# Run cross-validation
rf_cv_results <- rf_wf %>%
tune_grid(resamples = rf_folds,
grid = rf_tg,
metrics = metric_set(accuracy))
# Find best tuning parameters
rf_best_tune <- rf_cv_results %>%
select_best("accuracy")
# Finalize workflow and fit it
rf_final_wf <- rf_wf %>%
finalize_workflow(rf_best_tune) %>%
fit(data = ggg_train)
# Predict class
rf_preds <- predict(rf_final_wf,
new_data = ggg_test,
type = "class") %>%
bind_cols(ggg_test$id, .) %>%
rename(type = .pred_class) %>%
rename(id = ...1) %>%
select(id, type)
# Extract the final model
final_model <- rf_final_wf$fit$fit
final_model
table(ggg_train$type)
# Predict class for training data
train_preds <- predict(rf_final_wf, new_data = ggg_train) %>%
bind_cols(ggg_train) %>%
rename(predicted_type = .pred_class)
# Identify misclassified samples
misclassified_samples <- train_preds %>%
filter(type != predicted_type)
# View misclassified samples
print(misclassified_samples)
# Count misclassified samples for each type
table(misclassified_samples$type, misclassified_samples$predicted_type)
# Examine Results for Potential Areas to Improve
# Extract the final model
final_model <- rf_final_wf$fit$fit
final_model
# View Bes
rf_best_tune
# Ensure training data was balanced
table(ggg_train$type)
# View misclassified samples
print(misclassified_samples)
# Count misclassified samples for each type
table(misclassified_samples$type, misclassified_samples$predicted_type)
# Identify misclassified samples
misclassified_samples <- train_preds %>%
filter(type != predicted_type)
# View misclassified samples
print(misclassified_samples)
# Count misclassified samples for each type
table(misclassified_samples$type, misclassified_samples$predicted_type)
# Predict class for training data
train_preds <- predict(rf_final_wf, new_data = ggg_train) %>%
bind_cols(ggg_train) %>%
rename(predicted_type = .pred_class)
# Identify misclassified samples
misclassified_samples <- train_preds %>%
filter(type != predicted_type) %>%
select(id, type, predicted_type)
# View misclassified samples with axes
print(misclassified_samples)
# Count misclassified samples for each type
table(misclassified_samples$type, misclassified_samples$predicted_type)
# View misclassified samples with axes
print(misclassified_samples)
# Count misclassified samples for each type
table(misclassified_samples$type, misclassified_samples$predicted_type)
# Count misclassified samples for each type
table(misclassified_samples$type, misclassified_samples$predicted_type)
misclassified_samples
print(misclassified_samples, n = 32)
# Count misclassified samples for each type
table(misclassified_samples$type, misclassified_samples$predicted_type)
sum(misclassified_samples$type == "Goblin")
